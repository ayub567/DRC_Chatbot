{"version":3,"file":"js/265.6dbf380b.js","mappings":"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","sources":["webpack://DRC-AI/./src/utils/common.ts","webpack://DRC-AI/./src/utils/constant.ts","webpack://DRC-AI/./src/utils/enum.ts","webpack://DRC-AI/./src/utils/settingForm.ts","webpack://DRC-AI/./src/utils/settingPreset.ts","webpack://DRC-AI/./src/components/SelectItem.vue?59ad","webpack://DRC-AI/./src/components/SelectItem.vue"],"sourcesContent":["import {\n  availableAPIs,\n  availableModels,\n  availableModelsForGemini,\n  availableModelsForOllama,\n  availableModelsForPalm,\n  languageMap\n} from './constant'\n\nexport interface Auth {\n  type: supportedPlatforms\n  [propName: string]: any\n}\n\nexport function checkAuth(auth: Auth): boolean {\n  return (\n    auth &&\n    ((auth.type === 'official' && !!auth.apiKey) ||\n      (auth.type === 'azure' && !!auth.azureAPIKey) ||\n      (auth.type === 'palm' && !!auth.palmAPIKey) ||\n      (auth.type === 'gemini' && !!auth.geminiAPIKey) ||\n      auth.type === 'ollama')\n  )\n}\n\nexport function forceNumber(val: any) {\n  return Number(val) || 0\n}\n\nexport function getOptionList(\n  map: Record<string, string>,\n  from: 'key' | 'value' = 'key',\n  isUseValueAsLabel = false\n) {\n  return from === 'key'\n    ? Object.keys(map).map(key => ({\n        label: isUseValueAsLabel ? map[key] : key,\n        value: map[key]\n      }))\n    : Object.values(map).map(key => ({\n        label: key,\n        value: key\n      }))\n}\n\nconst localLanguageList = [\n  {\n    label: 'English',\n    value: 'en'\n  },\n  {\n    label: '简体中文',\n    value: 'zh-cn'\n  }\n]\n\nexport const optionLists = {\n  localLanguageList,\n  apiList: getOptionList(availableAPIs),\n  replyLanguageList: getOptionList(languageMap, 'value'),\n  officialModelList: getOptionList(availableModels),\n  palmModelList: getOptionList(availableModelsForPalm),\n  geminiModelList: getOptionList(availableModelsForGemini),\n  ollamaModelList: getOptionList(availableModelsForOllama)\n}\n\nexport function getLabel(key: string) {\n  return `${key}Label`\n}\n\nexport function getPlaceholder(key: string) {\n  return `${key}Placeholder`\n}\n","export const languageMap: IStringKeyMap = {\n  en: 'English',\n  es: 'Español',\n  fr: 'Français',\n  de: 'Deutsch',\n  it: 'Italiano',\n  pt: 'Português',\n  hi: 'हिन्दी',\n  ar: 'العربية',\n  'zh-cn': '简体中文',\n  'zh-tw': '繁體中文',\n  ja: '日本語',\n  ko: '한국어',\n  ru: 'Русский',\n  nl: 'Nederlands',\n  sv: 'Svenska',\n  fi: 'Suomi',\n  no: 'Norsk',\n  da: 'Dansk',\n  pl: 'Polski',\n  tr: 'Türkçe',\n  el: 'Ελληνικά',\n  he: 'עברית',\n  hu: 'Magyar',\n  id: 'Bahasa Indonesia',\n  ms: 'Bahasa Melayu',\n  th: 'ไทย',\n  vi: 'Tiếng Việt',\n  uk: 'Українська',\n  bg: 'Български',\n  cs: 'Čeština',\n  ro: 'Română',\n  sk: 'Slovenčina',\n  sl: 'Slovenščina',\n  hr: 'Hrvatski',\n  sr: 'Српски',\n  bn: 'বাংলা',\n  gu: 'ગુજરાતી',\n  kn: 'ಕನ್ನಡ',\n  mr: 'मराठी',\n  ta: 'தமிழ்',\n  te: 'తెలుగు',\n  ur: 'اردو'\n}\n\nexport const availableAPIs: IStringKeyMap = {\n  official: 'official',\n  azure: 'azure',\n  palm: 'palm',\n  gemini: 'gemini',\n  ollama: 'ollama'\n}\n\n// official API 可用的模型\nexport const availableModels: IStringKeyMap = {\n  'gpt-4o': 'gpt-4o',\n  'gpt-3.5': 'gpt-3.5-turbo',\n  'gpt-3.5-turbo-1106': 'gpt-3.5-turbo-1106',\n  'gpt-3.5-16k': 'gpt-3.5-turbo-16k',\n  'gpt-3.5-16k-0613': 'gpt-3.5-turbo-16k-0613',\n  'text-davinci-003': 'text-davinci-003',\n  gtp4: 'gpt-4',\n  'gpt-4-turbo': 'gpt-4-turbo',\n  'gpt-4-turo-preview': 'gpt-4-turo-preview',\n  'gpt4-0613': 'gpt-4-0613',\n  'gpt4-32k': 'gpt-4-32k',\n  'gpt4-32k-0613': 'gpt-4-32k-0613'\n}\n\n// palm api 可用的模型\nexport const availableModelsForPalm: IStringKeyMap = {\n  'text-bison-001': 'text-bison-001'\n}\n\n// Gemini API 可用的模型\nexport const availableModelsForGemini: IStringKeyMap = {\n  'gemini-pro': 'gemini-pro',\n  'gemini-1.5-flash': 'gemini-1.5-flash',\n  'gemini-1.5-pro': 'gemini-1.5-pro-latest'\n}\n\n// Ollama API 可用的模型\nexport const availableModelsForOllama: IStringKeyMap = {\n  llama3: 'llama3',\n  llama2: 'llama2',\n  phi3: 'phi3',\n  wizardlm2: 'wizardlm2',\n  mistral: 'mistral',\n  'llama2-uncensored': 'llama2-uncensored',\n  'llama2:13b': 'llama2:13b',\n  'llama2:70b': 'llama2:70b',\n  'gemma:2b': 'gemma:2b',\n  'gemma:7b': 'gemma:7b',\n  qwen: 'qwen',\n  codegemma: 'codegemma',\n  'command-r': 'command-r',\n  'command-r-plus': 'command-r-plus',\n  llava: 'llava',\n  codellama: 'codellama',\n  yi: 'yi',\n  codeqwen: 'codeqwen',\n  'dolphin-phi': 'dolphin-phi',\n  phi: 'phi',\n  'neural-chat': 'neural-chat',\n  'starlinh-lm': 'starlinh-lm',\n  'orca-mini': 'orca-mini',\n  vicuna: 'vicuna'\n}\n\nexport const buildInPrompt = {\n  translate: {\n    system: (language: string) =>\n      `Act as an ${language} translator, spelling corrector and improver.`,\n    user: (\n      text: string,\n      language: string\n    ) => `I will speak to you in any language and you will detect the language,\n    translate it and answer in the corrected and improved version of my text, in ${language}.\n    I want you to replace my simplified A0-level words and sentences with more beautiful and elegant, \n    upper level ${language} words and sentences.\n    Keep the meaning same, but make them more literary.\n    I want you to only reply the correction, the improvements and nothing else, do not write explanations.\n    Reply in ${language}.\n    My first sentence is: ${text}`\n  },\n  // polish: {\n  //   system: (language: string) =>\n  //     `As a writing improvement assistant, Reply in ${language}`,\n  //   user: (\n  //     text: string,\n  //     language: string\n  //   ) => `Improve the spelling, grammar, clarity, concision,\n  //   and overall readability of the text provided, while breaking down long sentences, reducing repetition,\n  //   and providing suggestions for improvement.\n  //   Please provide only the corrected ${language} version of the text and avoid including explanations.\n  //   Please begin by editing the following text: ${text}`\n  // },\n  // academic: {\n  //   system: (language: string) =>\n  //     `As an academic paper writing assistant, Reply in ${language}`,\n  //   user: (\n  //     text: string,\n  //     language: string\n  //   ) => `I want you to act as a professional spelling and grammar corrector and improver.\n  //   I want you to replace my simplified A0-level words and sentences with more beautiful and elegant,\n  //   upper level ${language} words and sentences.\n  //   Keep the meaning same, but make them more literary and improve my expression in the style of SCI papers.\n  //   High IF SCI papers are preferred.\n  //   Please begin by editing the following text: ${text}`\n  // },\n  // summary: {\n  //   system: (language: string) =>\n  //     `As a summarization assistant, Reply in ${language}`,\n  //   user: (\n  //     text: string,\n  //     language: string\n  //   ) => `Summarize the following text into 100 words,\n  //   making it easy to read and comprehend. The summary should be concise, clear,\n  //   and capture the main points of the text. Avoid using complex sentence structures or technical jargon.\n  //   Respond in ${language}. Please begin by editing the following text: ${text}`\n  // },\n  review: {\n    system: (language: string) =>\n      `As an academic check and evaluate research protocol, Reply in ${language}`,\n    user: (\n      text: string,\n      language: string\n    ) => `I want you to act as a check and evaluate professional research protocol, give answer and explanation.\nTitle Alignment:\nIs title missing?\nIf “No” than, otherwise label “missing”\nDoes the title accurately reflect the content and scope of the research?\nDoes the title contain study population, exposure, outcome and study design?\nResearch Questions:\nIs the research question missing?\nIf “No” then, otherwise label “missing”\nAre the research questions clearly articulated and logically derived from the study's purpose or problem statement?\nAppraise research question based on FINER criteria (Feasible, innovative, Novel, ethical and relevant)\nDoes research question base on PICO criteria (population, intervention or exposure, control or unexposed and outcome)\nObjectives:\nIs the objective missing?\nIf “ No” then, otherwise label “missing”\nDo the objectives of the study directly align with the research questions and overarching goal of the research?\nAre the research questions specific, measurable, achievable, relevant, and time-bound (SMART)?\nHypothesis (if applicable):\nIs hypothesis missing or not applicable?\nIf “No” than, otherwise label “missing”\nIf hypotheses are proposed, are they clearly stated and testable based on the research questions?\nDo the hypotheses make estimates about the relationship between variables or expected outcomes?\nAlignment and Coherence:\nIs there consistency and coherence between the title, research questions, objectives, and, if applicable, hypotheses?\nPlease check what is inconsistent between the title, research questions, objectives, and, if applicable, hypotheses?\nRationale:\nDoes the protocol provide a clear and compelling rationale for why the study is needed?\nHas the protocol identified gaps or limitations in existing literature or knowledge that the study aims to address?\nAre the significance and potential implications of the study's findings clearly articulated?\nAlignment with Rationale:\nDo the research questions and objectives directly align with the stated rationale for the study?\nAre the objectives designed to address the specific gaps or questions identified in the rationale?\nDoes the study design and methodology align with the goals and objectives derived from the rationale?\nStudy Design:\nDoes the protocol clearly outline the research design (e.g., experimental, observational, qualitative, quantitative)?\nIs the chosen design appropriate for addressing the research questions or objectives?\nAre there any potential biases or confounding variables that should be addressed?\nSampling Strategy:\nIs the sampling strategy clearly defined and appropriate for the research aims?\nAre the sample size and sampling technique justified?\nAre there any potential limitations or biases associated with the sampling strategy?\nData Collection Methods:\nAre the data collection methods clearly described and appropriate for the research design?\nAre there any potential sources of error or bias in the data collection process?\nAre the instruments or tools used for data collection validated and reliable?\nData Analysis Plan:\nIs the data analysis plan clearly outlined and appropriate for the research questions?\nAre the statistical methods or analytical techniques justified and suitable for the data?\nAre there any potential limitations or assumptions associated with the proposed analysis?\nValidity and Reliability:\nHas the protocol addressed the validity and reliability of the research findings?\nAre there any potential threats to internal or external validity that should be considered?\nHave steps been taken to enhance the reliability of the study findings?\nExposure Variable:\nIs the exposure variable clearly defined and described in the protocol?\nAre the methods for measuring or assessing the exposure variable specified?\nIs there justification for the choice of the exposure variable based on existing literature or theoretical rationale?\nOutcome Variable:\nIs the outcome variable clearly defined and operationalized in the protocol?\nAre the methods for measuring or assessing the outcome variable specified?\nIs there justification for the choice of the outcome variable based on its relevance to the research question or objectives?\nConfounders:\nHave potential confounding variables been identified and addressed in the study design?\nAre methods proposed to control for confounding variables, such as matching, stratification, or statistical adjustment?\nHave efforts been made to measure or assess confounders accurately to minimize bias?\nEffect Modifiers:\nHave potential effect modifiers been considered in the study design?\nIs there justification for why certain variables may modify the relationship between the exposure and outcome?\nAre there plans to explore interactions between the exposure variable and potential effect modifiers?\nIndependent Variables:\nAre there additional independent variables of interest beyond the exposure variable?\nHave these independent variables been clearly defined and justified in the context of the research question or objectives?\nAre there plans to explore relationships between independent variables and the outcome, either as primary analyses or secondary explorations?\nSample Size Calculation:\nHas the protocol provided a rationale for the chosen sample size?\nAre the parameters used in the sample size calculation clearly defined (e.g., effect size, significance level, power)?\nAre the assumptions underlying the sample size calculation justified based on previous research or pilot data?\nStatistical Methods for Sample Size Calculation:\nWhat statistical methods were used for calculating the sample size?\nAre the chosen statistical methods appropriate for the study design and outcome variables?\nHas the protocol considered potential sources of variability or uncertainty in the sample size calculation?\nPower Analysis:\nHas the protocol conducted a power analysis to determine the likelihood of detecting a true effect if it exists?\nIs the chosen level of statistical power sufficient to detect meaningful differences or associations?\nHave sensitivity analyses been conducted to assess the impact of varying assumptions on statistical power?\nSetting:\nIs the setting for data collection clearly described and appropriate for the research aims?\nHave potential advantages or limitations of the chosen setting been considered?\nAre there any special considerations for accessing or conducting research in the chosen setting (e.g., institutional requirements, community engagement)?\nSampling Frame and Population:\nHas the protocol defined the sampling frame and target population for the study?\nAre inclusion and exclusion criteria for participant selection clearly specified?\nAre there any potential biases or limitations associated with the sampling frame or population that need to be addressed?\nSampling Method:\nWhat sampling method will be used to select participants?\nIs the chosen sampling method appropriate for the study design and research objectives?\nHave steps been taken to minimize biases or enhance the representativeness of the sample? \nDefinition of Study Population:\nHow is the study population defined in the protocol?\nAre there specific inclusion and exclusion criteria delineated for participant eligibility?\nIs the rationale for selecting this particular study population clearly justified?\nCharacteristics of the Study Population:\nWhat demographic characteristics are used to describe the study population (e.g., age, gender, ethnicity, socioeconomic status)?\nAre there any specific health or clinical characteristics relevant to the research question?\nIs there diversity within the study population to ensure representation and generalizability of findings?\nTarget Sample Size vs. Study Population Size:\nHow does the anticipated sample size compare to the size of the overall study population?\nAre there plans to recruit the entire study population or only a subset?\nIf only a subset will be recruited, what strategies will be used to ensure representativeness and generalizability?\nSource of Study Population:\nWhere will the study population be recruited or identified from (e.g., hospitals, community centers, online platforms)?\nAre there any potential biases or limitations associated with the source of the study population?\nHow will participants be approached and recruited to ensure voluntary participation and informed consent?\nRelevance of Study Population to Research Question:\nIs the study population directly relevant to the research question or objectives?\nAre there any subgroups within the study population that will be analyzed separately based on their characteristics or exposures?\nHave efforts been made to ensure that the study population reflects the target audience or population of interest for the research?\n    Respond in ${language}. Please begin by editing the following text: ${text}`\n  },\n  grammar: {\n    system: (language: string) =>\n      `Act like you are an expert grammar checker. Look for mistakes and make sentences more fluent, Reply in ${language}`,\n    user: (\n      text: string,\n      language: string\n    ) => `Please analyze the following text for a wide range of grammatical aspects and provide corrections. Be thorough in identifying and fixing any grammatical mistakes, including checking for correct punctuation usage, ensuring proper sentence structure, enhancing readability, identifying and correcting spelling mistakes, and verifying subject-verb agreement. Your assistance in ensuring the grammatical accuracy of the text is highly appreciated. Please be thorough in your examination, and provide comprehensive corrections to enhance the overall grammatical integrity of the text.\n\n    Just reply to user input with the correct grammar, DO NOT reply to the context of the question of the user input. If the user input is grammatically correct and fluent, just reply “sounds good”.\n    Respond in ${language}. Please begin by editing the following text: ${text}`\n  }\n}\n","export enum localStorageKey {\n  // common\n  api = 'api',\n  localLanguage = 'localLanguage',\n  replyLanguage = 'replyLanguage',\n  insertType = 'insertType',\n  // official api\n  apiKey = 'apiKey',\n  model = 'model',\n  customModel = 'customModel',\n  temperature = 'temperature',\n  maxTokens = 'maxTokens',\n  basePath = 'basePath',\n  // azure api\n  azureAPIKey = 'azureAPIKey',\n  azureAPIEndpoint = 'azureAPIEndpoint',\n  azureDeploymentName = 'azureDeploymentName',\n  azureMaxTokens = 'azureMaxTokens',\n  azureTemperature = 'azureTemperature',\n  // palm api\n  palmAPIKey = 'palmAPIKey',\n  palmAPIEndpoint = 'palmAPIEndpoint',\n  palmMaxTokens = 'palmMaxTokens',\n  palmTemperature = 'palmTemperature',\n  palmModel = 'palmModel',\n  palmCustomModel = 'palmCustomModel',\n  // gemini api\n  geminiAPIKey = 'geminiAPIKey',\n  geminiMaxTokens = 'geminiMaxTokens',\n  geminiTemperature = 'geminiTemperature',\n  geminiModel = 'geminiModel',\n  geminiCustomModel = 'geminiCustomModel',\n  // ollama api\n  ollamaEndpoint = 'ollamaEndpoint',\n  ollamaModel = 'ollamaModel',\n  ollamaTemperature = 'ollamaTemperature',\n  ollamaCustomModel = 'ollamaCustomModel',\n  // proxy\n  enableProxy = 'enableProxy',\n  proxy = 'proxy',\n  defaultSystemPrompt = 'defaultSystemPrompt',\n  defaultPrompt = 'defaultPrompt'\n}\n","import { ref } from 'vue'\nimport { SettingNames, settingPreset } from './settingPreset'\n\nfunction useSettingForm() {\n  const settingForm = ref<{ [key in SettingNames]: any }>(\n    Object.keys(settingPreset).reduce(\n      (acc, key) => {\n        const presetKey = key as SettingNames\n        acc[presetKey] = settingPreset[presetKey].defaultValue\n        return acc\n      },\n      {} as { [key in SettingNames]: any }\n    )\n  )\n  const settingFormKeys = Object.keys(settingForm.value) as SettingNames[]\n  settingFormKeys.forEach(key => {\n    if (settingPreset[key].getFunc) {\n      settingForm.value[key] = settingPreset[key].getFunc!()\n      return\n    }\n    settingForm.value[key as keyof typeof settingForm.value] =\n      localStorage.getItem(settingPreset[key].saveKey || key) ||\n      settingForm.value[key as keyof typeof settingForm.value]\n  })\n  return { settingForm, settingFormKeys }\n}\n\nexport default useSettingForm\n","import { i18n } from '@/i18n'\nimport { forceNumber, optionLists } from './common'\nimport {\n  availableModels,\n  availableModelsForGemini,\n  availableModelsForOllama,\n  availableModelsForPalm\n} from './constant'\nimport { localStorageKey } from './enum'\n\ntype componentType = 'input' | 'select' | 'inputNum' | 'readonly'\n\ninterface ISettingOption {\n  defaultValue: string | number\n  saveKey?: string\n  type?: componentType\n  stepStyle?: 'temperature' | 'maxTokens'\n  optionList?: { label: string; value: string }[]\n  saveFunc?: (value: any) => void\n  getFunc?: () => any\n}\n\nexport type SettingNames =\n  | 'api'\n  | 'localLanguage'\n  | 'replyLanguage'\n  | 'officialAPIKey'\n  | 'officialBasePath'\n  | 'officialCustomModel'\n  | 'officialTemperature'\n  | 'officialMaxTokens'\n  | 'officialModelSelect'\n  | 'azureAPIKey'\n  | 'azureAPIEndpoint'\n  | 'azureDeploymentName'\n  | 'azureTemperature'\n  | 'azureMaxTokens'\n  | 'palmAPIKey'\n  | 'palmAPIEndpoint'\n  | 'palmCustomModel'\n  | 'palmModelSelect'\n  | 'palmTemperature'\n  | 'palmMaxTokens'\n  | 'geminiAPIKey'\n  | 'geminiCustomModel'\n  | 'geminiModelSelect'\n  | 'geminiTemperature'\n  | 'geminiMaxTokens'\n  | 'ollamaEndpoint'\n  | 'ollamaCustomModel'\n  | 'ollamaModelSelect'\n  | 'ollamaTemperature'\n\ntype keyoflocalStorageKey = keyof typeof localStorageKey\n\nconst createStorageFuncs = (key: string, defaultValue: any) => ({\n  getFunc: () => forceNumber(localStorage.getItem(key)) || defaultValue,\n  saveFunc: (value: any) => localStorage.setItem(key, value.toString())\n})\n\nconst inputSetting = (\n  defaultValue: string,\n  saveKey?: keyoflocalStorageKey\n): ISettingOption => ({\n  defaultValue,\n  saveKey,\n  type: 'input'\n})\n\nconst inputNumSetting = (\n  defaultValue: number,\n  saveKey: keyoflocalStorageKey,\n  stepStyle: 'temperature' | 'maxTokens'\n) => ({\n  defaultValue,\n  saveKey,\n  type: 'inputNum' as componentType,\n  stepStyle,\n  ...createStorageFuncs(localStorageKey[saveKey], defaultValue)\n})\n\nconst selectSetting = (\n  defaultValue: string,\n  saveKey: keyoflocalStorageKey,\n  optionList: { label: string; value: string }[],\n  availableModels: Record<string, string> = {}\n) => ({\n  defaultValue,\n  saveKey,\n  type: 'select' as componentType,\n  optionList,\n  getFunc: getModelHelper(\n    localStorageKey[saveKey],\n    availableModels,\n    defaultValue\n  )\n})\n\nconst getModelHelper = (\n  key: string,\n  availableModels: Record<string, string>,\n  defaultValue: string\n): (() => string) => {\n  return () => {\n    const modelTemp = localStorage.getItem(key) || defaultValue\n    if (Object.keys(availableModels).includes(modelTemp)) {\n      return availableModels[modelTemp]\n    } else if (Object.values(availableModels).includes(modelTemp)) {\n      return modelTemp\n    } else {\n      return defaultValue\n    }\n  }\n}\n\nconst defaultInputSetting = inputSetting('')\n\nexport const settingPreset: Record<SettingNames, ISettingOption> = {\n  api: {\n    ...inputSetting('official'),\n    type: 'select',\n    optionList: optionLists.apiList\n  },\n  localLanguage: {\n    ...inputSetting('en'),\n    type: 'select',\n    optionList: optionLists.localLanguageList,\n    saveFunc: (value: string) => {\n      i18n.global.locale.value = value as 'en' | 'zh-cn'\n      localStorage.setItem(localStorageKey.localLanguage, value)\n    }\n  },\n  replyLanguage: {\n    ...inputSetting('English'),\n    type: 'select',\n    optionList: optionLists.replyLanguageList\n  },\n  officialAPIKey: inputSetting('FabQbPHT3BlbkFJGWFEQUqUBEhbIboJYFiN', 'apiKey'),\n  officialBasePath: inputSetting('', 'basePath'),\n  officialCustomModel: inputSetting('', 'customModel'),\n  officialTemperature: inputNumSetting(0.7, 'temperature', 'temperature'),\n  officialMaxTokens: inputNumSetting(800, 'maxTokens', 'maxTokens'),\n  officialModelSelect: selectSetting(\n    availableModels['gpt-3.5'],\n    'model',\n    optionLists.officialModelList,\n    availableModels\n  ),\n  azureAPIKey: defaultInputSetting,\n  azureAPIEndpoint: defaultInputSetting,\n  azureDeploymentName: defaultInputSetting,\n  azureTemperature: inputNumSetting(0.7, 'azureTemperature', 'temperature'),\n  azureMaxTokens: inputNumSetting(800, 'azureMaxTokens', 'maxTokens'),\n  palmAPIKey: defaultInputSetting,\n  palmAPIEndpoint: inputSetting(\n    'https://generativelanguage.googleapis.com/v1beta2'\n  ),\n  palmCustomModel: defaultInputSetting,\n  palmModelSelect: selectSetting(\n    availableModelsForPalm['text-bison-001'],\n    'palmModel',\n    optionLists.palmModelList,\n    availableModelsForPalm\n  ),\n  palmTemperature: inputNumSetting(0.7, 'palmTemperature', 'temperature'),\n  palmMaxTokens: inputNumSetting(800, 'palmMaxTokens', 'maxTokens'),\n  geminiAPIKey: defaultInputSetting,\n  geminiCustomModel: defaultInputSetting,\n  geminiModelSelect: selectSetting(\n    availableModelsForGemini['gemini-pro'],\n    'geminiModel',\n    optionLists.geminiModelList,\n    availableModelsForGemini\n  ),\n  geminiTemperature: inputNumSetting(0.7, 'geminiTemperature', 'temperature'),\n  geminiMaxTokens: inputNumSetting(800, 'geminiMaxTokens', 'maxTokens'),\n  ollamaEndpoint: defaultInputSetting,\n  ollamaCustomModel: defaultInputSetting,\n  ollamaModelSelect: selectSetting(\n    availableModelsForOllama.llama2,\n    'ollamaModel',\n    optionLists.ollamaModelList,\n    availableModelsForOllama\n  ),\n  ollamaTemperature: inputNumSetting(0.7, 'ollamaTemperature', 'temperature')\n}\n","import { useModel as _useModel, mergeModels as _mergeModels, defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, withCtx as _withCtx, createVNode as _createVNode } from \"vue\"\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'SelectItem',\n  props: /*#__PURE__*/_mergeModels({\n    label: {},\n    placeholder: {},\n    optionList: {}\n  }, {\n    \"modelValue\": {},\n    \"modelModifiers\": {},\n  }),\n  emits: /*#__PURE__*/_mergeModels(['change'], [\"update:modelValue\"]),\n  setup(__props: any, { emit: __emit }) {\n\n\n\nconst value = _useModel<string>(__props, \"modelValue\")\n\nconst emit = __emit\n\nconst handleSelectChange = (value: string) => {\n  emit('change', value)\n}\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_el_option = _resolveComponent(\"el-option\")!\n  const _component_el_select = _resolveComponent(\"el-select\")!\n  const _component_el_form_item = _resolveComponent(\"el-form-item\")!\n\n  return (_openBlock(), _createBlock(_component_el_form_item, null, {\n    label: _withCtx(() => [\n      _createElementVNode(\"span\", null, _toDisplayString(_ctx.$t(_ctx.label)), 1)\n    ]),\n    default: _withCtx(() => [\n      _createVNode(_component_el_select, {\n        modelValue: value.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((value).value = $event)),\n        size: \"small\",\n        placeholder: _ctx.$t(_ctx.placeholder),\n        onChange: handleSelectChange\n      }, {\n        default: _withCtx(() => [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.optionList, (item) => {\n            return (_openBlock(), _createBlock(_component_el_option, {\n              key: item.value,\n              label: item.label,\n              value: item.value\n            }, null, 8, [\"label\", \"value\"]))\n          }), 128))\n        ]),\n        _: 1\n      }, 8, [\"modelValue\", \"placeholder\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./SelectItem.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./SelectItem.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["checkAuth","auth","type","apiKey","azureAPIKey","palmAPIKey","geminiAPIKey","forceNumber","val","Number","getOptionList","map","from","isUseValueAsLabel","Object","keys","key","label","value","values","localLanguageList","optionLists","apiList","availableAPIs","replyLanguageList","languageMap","officialModelList","availableModels","palmModelList","availableModelsForPalm","geminiModelList","availableModelsForGemini","ollamaModelList","availableModelsForOllama","getLabel","getPlaceholder","en","es","fr","de","it","pt","hi","ar","ja","ko","ru","nl","sv","fi","no","da","pl","tr","el","he","hu","id","ms","th","vi","uk","bg","cs","ro","sk","sl","hr","sr","bn","gu","kn","mr","ta","te","ur","official","azure","palm","gemini","ollama","gtp4","llama3","llama2","phi3","wizardlm2","mistral","qwen","codegemma","llava","codellama","yi","codeqwen","phi","vicuna","buildInPrompt","translate","system","language","user","text","review","grammar","localStorageKey","useSettingForm","settingForm","ref","settingPreset","reduce","acc","presetKey","defaultValue","settingFormKeys","forEach","getFunc","localStorage","getItem","saveKey","createStorageFuncs","saveFunc","setItem","toString","inputSetting","inputNumSetting","stepStyle","selectSetting","optionList","getModelHelper","modelTemp","includes","defaultInputSetting","api","localLanguage","i18n","global","locale","replyLanguage","officialAPIKey","officialBasePath","officialCustomModel","officialTemperature","officialMaxTokens","officialModelSelect","azureAPIEndpoint","azureDeploymentName","azureTemperature","azureMaxTokens","palmAPIEndpoint","palmCustomModel","palmModelSelect","palmTemperature","palmMaxTokens","geminiCustomModel","geminiModelSelect","geminiTemperature","geminiMaxTokens","ollamaEndpoint","ollamaCustomModel","ollamaModelSelect","ollamaTemperature","_defineComponent","__name","props","_mergeModels","placeholder","emits","setup","__props","emit","__emit","_useModel","handleSelectChange","_ctx","_cache","_component_el_option","_resolveComponent","_component_el_select","_component_el_form_item","_openBlock","_createBlock","_withCtx","_createElementVNode","_toDisplayString","$t","default","_createVNode","modelValue","$event","size","onChange","_createElementBlock","_Fragment","_renderList","item","_","__exports__"],"sourceRoot":""}